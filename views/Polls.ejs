<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        #pollDiv {
            overflow-y: auto;
            padding: 10px;
            width: 200px;
        }

        #topButtons {
            position: fixed;
            top: 12px;
            right: 12px;
            display: flex;
            gap: 8px;
            z-index: 1000;
        }

        #pollCreateOverlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            background: rgba(0, 0, 0, 0.4);
            display: none;
            z-index: 1001;
        }

        #pollCreatePanel {
            background: #ffffff;
            width: 100%;
            height: 100%;
            overflow: auto;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.2);
        }

        #pollCreateHeader {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 12px 16px;
            border-bottom: 1px solid #e5e7eb;
        }

        #pollCreateContent {
            padding: 16px;
        }

        .pollChoices {
            list-style-type: none;
            align-items: left;
            padding: 10px;
            margin: 0;
            overflow: auto;
        }

        #classDataOverlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            background: rgba(0, 0, 0, 0.4);
            display: none;
            z-index: 1001;
        }

        #classDataPanel {
            background: #ffffff;
            width: 100%;
            height: 100%;
            overflow: auto;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.2);
        }

        #classDataHeader {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 12px 16px;
            border-bottom: 1px solid #e5e7eb;
        }

        #classDataContent {
            padding: 16px;
        }

        #classDataPre {
            white-space: pre-wrap;
            font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
            font-size: 12px;
            line-height: 1.5;
        }
    </style>

</head>

<body>
    <% if ((permissions || 0)>= 3) { %>
        <div id="topButtons">
            <button id="pollCreateToggle">Create poll</button>
            <button id="classDataToggle">View data</button>
        </div>
        <% } %>

            <div id="pollCreateOverlay">
                <div id="pollCreatePanel">
                    <div id="pollCreateHeader">
                        <h3 style="margin:0;">Create a poll</h3>
                        <button id="pollCreateClose">Close</button>
                    </div>
                    <div id="pollCreateContent">
                        <input type="text" placeholder="Poll Name" id="NewPollName"><br><br>
                        <div id="newPollOptionDiv">
                            <input type="text" placeholder="Poll Option" id="NewPollOption1"></input><br>
                        </div>
                        <button id="addOptionButton" onclick="addOption()">add option</button>
                        <button id="addOptionButton" onclick="removeOption()">remove option</button><br><br>
                        <button id="createPollButton" onclick="newPoll()">CREATE POLL</button>
                    </div>
                </div>
            </div>


            <div id="pollDiv">
            </div>
            <div id="classDataOverlay">
                <div id="classDataPanel">
                    <div id="classDataHeader">
                        <h3 style="margin:0;">Class data</h3>
                        <button id="classDataClose">Close</button>
                    </div>
                    <div id="classDataContent">
                        <pre id="classDataPre">No data received yet.</pre>
                    </div>
                </div>
            </div>
</body>
<script>
    window.currentUser = { name: <% - JSON.stringify(user || null) %>, permissions: <% - JSON.stringify(permissions || null) %> };
    console.log('currentUser', window.currentUser);
    addOptionButton = document.getElementById("addOptionButton");
    createPollButton = document.getElementById("createPollButton");
    pollDiv = document.getElementById("pollDiv");
    newPollOptionDiv = document.getElementById("newPollOptionDiv");
    currentOptionCount = 1;
    window.pollCounter = window.pollCounter || 0;

    function addOption() {
        let newOption = document.createElement("input");
        newOption.type = "text";
        newOption.placeholder = "Poll Option";
        newOption.id = "NewPollOption" + (currentOptionCount + 1);
        newPollOptionDiv.appendChild(newOption);
        newPollOptionDiv.appendChild(document.createElement("br"));
        currentOptionCount++;
        console.log(currentOptionCount);
    }

    function removeOption() {
        if (currentOptionCount > 1) {
            newPollOptionDiv.removeChild(newPollOptionDiv.lastChild);
            newPollOptionDiv.removeChild(newPollOptionDiv.lastChild);
            currentOptionCount--;
            console.log(currentOptionCount);
        }
    }

    function fillPoll() {
        let pollName = arguments[0];
        let options = arguments[1];
        window.pollCounter += 1;
        const groupName = `poll_${window.pollCounter}`;
        let pollHTML = document.createElement("div");
        let pollTitle = document.createElement("h3");
        pollTitle.innerText = pollName;
        pollHTML.appendChild(pollTitle);
        let optionList = document.createElement("ul");
        optionList.className = "pollChoices";
        for (let i = 0; i < options.length; i++) {
            let optionItem = document.createElement("li");
            let optionInput = document.createElement("input");
            optionInput.type = "radio";
            optionInput.name = groupName;
            optionInput.value = options[i];
            optionItem.appendChild(optionInput);
            optionItem.appendChild(document.createTextNode(options[i]));
            optionList.appendChild(optionItem);
            optionList.appendChild(document.createElement("br"));
        }
        pollHTML.appendChild(optionList);
        pollDiv.appendChild(pollHTML);

        // Allow changing answers and voting in multiple polls simultaneously
        // Each poll's inputs share a unique name (pollName), so only one option per poll can be selected at a time by default.
    }

    function newPoll() {
        if (document.getElementById("NewPollName").value.trim() === "") {
            alert("Please enter a poll name.");
            return;
        }
        let pollName = document.getElementById("NewPollName").value;
        let options = [];
        for (let i = 1; i <= currentOptionCount; i++) {
            if (document.getElementById("NewPollOption" + i).value.trim() === "") {
                alert("Please don't leave any options blank.");
                return;
            }
        }
        for (let i = 1; i <= currentOptionCount; i++) {
            let optionValue = document.getElementById("NewPollOption" + i).value;
            options.push(optionValue);
        }
        console.log(pollName);
        console.log(options);
        fillPoll(pollName, options);

        NewPollName.value = "";
        currentOptionCount = 1;
        newPollOptionDiv.innerHTML = '<input type="text" placeholder="Poll Option" id="NewPollOption1"></input><br>'; // reset number of option text fields
    }
</script>
<script src="/socket.io/socket.io.js"></script>
<script>
    const socket = io();
    socket.on('connect', () => console.log('Connected to PollPin socket'));
    socket.on('serverAlive', (msg) => console.log('serverAlive', msg));
    socket.on('classData', (classroomData) => {
        console.log('classData:', classroomData);
        window.currentClassData = classroomData;
        renderClassData();
    });
    socket.on('disconnect', (reason) => console.log('socket disconnected', reason));
    socket.on('connect_error', (err) => console.log('socket connect_error', err));

    const classDataToggle = document.getElementById('classDataToggle');
    const classDataOverlay = document.getElementById('classDataOverlay');
    const classDataClose = document.getElementById('classDataClose');
    const classDataPre = document.getElementById('classDataPre');

    function renderClassData() {
        try {
            classDataPre.textContent = JSON.stringify(window.currentClassData ?? {}, null, 2);
        } catch (e) {
            classDataPre.textContent = String(window.currentClassData);
        }
    }

    if (classDataToggle) {
        classDataToggle.addEventListener('click', () => {
            const isOpen = classDataOverlay.style.display === 'block';
            if (isOpen) {
                classDataOverlay.style.display = 'none';
            } else {
                // Close poll creator if open
                pollCreateOverlay.style.display = 'none';
                renderClassData();
                classDataOverlay.style.display = 'block';
            }
        });
    }
    classDataClose.addEventListener('click', () => {
        classDataOverlay.style.display = 'none';
    });

    const pollCreateToggle = document.getElementById('pollCreateToggle');
    const pollCreateOverlay = document.getElementById('pollCreateOverlay');
    const pollCreateClose = document.getElementById('pollCreateClose');

    if (pollCreateToggle) {
        pollCreateToggle.addEventListener('click', () => {
            const isOpen = pollCreateOverlay.style.display === 'block';
            if (isOpen) {
                pollCreateOverlay.style.display = 'none';
            } else {
                // Close class data if open
                classDataOverlay.style.display = 'none';
                pollCreateOverlay.style.display = 'block';
            }
        });
    }
    pollCreateClose.addEventListener('click', () => {
        pollCreateOverlay.style.display = 'none';
    });
</script>

</html>